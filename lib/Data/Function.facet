module Data.Function : Module

id
: { A : Type } -> (x : 1 A) -> A
{ x }

const
: { A, B : Type } -> (x : 1 A) -> (_ : B) -> A
{ x }

flip
: { A, B, C : Type } -> (f : 1 (A -> B -> C)) -> (B -> A -> C)
# NB: Iâ€™ve removed nested, chained pattern matching for the time being.
{ b -> { a -> f a b } }


_ << _ [assoc]
: { A, B, C : Type } -> (f : 1 (B -> C)) -> (g : 1 (A -> B)) -> (A -> C)
{ a -> f (g a) }

_ >> _ [assoc]
: { A, B, C : Type } -> (g : 1 (A -> B)) -> (f : 1 (B -> C)) -> (A -> C)
{ a -> f (g a) }


_ <| _ [right-assoc]
: { A, B : Type } -> (f : 1 (A -> B)) -> (a : A) -> B
{ f a }

_ |> _ [left-assoc]
: { A, B : Type } -> (a : A) -> (f : 1 (A -> B)) -> B
{ f a }


case
: { A, B : Type } -> A -> 1 (A -> B) -> B
{ (_ |> _) }


fix
: { A, B : Type } -> (f : (A -> B) -> (A -> B)) -> (x : A) -> B
{ f (fix f) x }


_ ; _ [right-assoc]
: { A, B : Type } -> (_ : A) -> (b : 1 B) -> B
{ b }
