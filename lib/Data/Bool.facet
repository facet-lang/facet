module Data.Bool : Module

import Data.Unit

data Bool : Type
{ false : Bool
, true : Bool }

not : Bool -> Bool
{ (true)  -> false
, (false) -> true }

# NB: I am removing nested, chained pattern matches until I get around to correcting their elaboration
_ && _ : Bool -> Bool -> Bool
{ (true) -> { x -> x }
, _      -> { _ -> false } }

# NB: I am removing nested, chained pattern matches until I get around to correcting their elaboration
_ || _ : Bool -> Bool -> Bool
{ (false) -> { x -> x }
, _       -> { _ -> true } }

if : { A : Type } -> (c : Bool) -> (t : Unit -> A) -> (e : Unit -> A) -> A
{ bool e t c }

bool : { A : Type } -> (e : Unit -> A) -> (t : Unit -> A) -> Bool -> A
{ (true)  -> t!
, (false) -> e! }
