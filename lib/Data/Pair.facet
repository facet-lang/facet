module Data.Pair : Module

data Pair : (A : Type) -> (B : Type) -> Type
{ pair : A -> B -> Pair A B }

fst : { A, B : Type } -> Pair A B -> A
{ (pair a _) -> a }

snd : { A, B : Type } -> Pair A B -> B
{ (pair _ b) -> b }


curry
: { A, B, C : Type } -> (f : Pair A B -> C) -> (x : A) -> (y : B) -> C
{ f (pair x y) }

uncurry
: { A, B, C : Type } -> (f : A -> B -> C) -> Pair A B -> C
{ (pair x y) -> f x y } # NB: you can’t bind individual fields of a type in the signature, so we have to pattern match here
# NB: equivalently: uncurry : { A, B, C : Type } -> (f : A -> B -> C) -> (x : Pair A B) -> C { f (fst x) (snd x) }

# would be nice (?) to support pattern matching for a single case in the sig, tho…
# uncurry
# : { A, B, C : Type } -> (f : A -> B -> C) -> (pair (x : A) (y : B)) -> C
# { f x y }
