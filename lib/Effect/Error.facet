module Effect.Error
: Module

import Data.Either
import Data.Function

interface Error : (E : Type) -> Interface
{ throw : { A : Type } -> E -> A
, catch : { A : Type } -> [Error E] A -> (E -> A) -> A }

handle : { E, A : Type } -> (h : E -> A) -> [Error E] A -> [Error E] A
{ [a] -> { catch a h } }

try : { E, A : Type } -> [Error E] A -> [Error E] Either E A
{ [a] -> handle inl (inr a) }

except : { E, A : Type } -> (e : Either E A) -> [Error E] A
{ either throw id e }


# Handlers

runError : { E, A : Type } -> [Error E] A -> Either E A
{ [e] -> error inl inr e }

error
:  { E, A, R : Type }
-> (failure : E -> R)
-> (success : A -> R)
-> [Error E] A
-> R
{ [ throw e   ; _ ] -> failure e
, [ catch a h ; k ] -> error (error failure success << k << h) (error failure success << k) a
, a                 -> success a }
