module Effect.State
: Module

import Data.Function
import Data.Pair
import Data.Unit

interface State : (S : Type) -> Interface
{ get : S
, put : S -> Unit }

modify : { S : Type } -> (f : S -> S) -> [State S] Unit
{ put (f get) }


# Handlers

execState : { S, A : Type } -> S -> [State S] A -> S
{ state const }

evalState : { S, A : Type } -> S -> [State S] A -> A
{ state { _ -> { a -> a } } }

runState : { S, A : Type } -> S -> [State S] A -> Pair S A
{ state pair }

state : { S, A, R : Type } -> (z : S -> A -> R) -> (s : S) -> [State S] A -> R
{ [ get   ; k ] -> state z s (k s)
, [ put s ; k ] -> state z s (k unit)
, a             ->       z s a }
