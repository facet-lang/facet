# NB: this file and its syntax is entirely aspirational.

Data.Function : Module

id
: { A : Type } -> (x : A) -> A
{ x }

const
: { A, B : Type } -> (x : A) -> (_ : B) -> A
{ x }

flip
: { A, B, C : Type } -> (f : A -> B -> C) -> (B -> A -> C)
# NB: Iâ€™ve removed nested, chained pattern matching for the time being.
{ b -> { a -> f a b } }


_ << _ [assoc]
: { A, B, C : Type } -> (f : B -> C) -> (g : A -> B) -> (A -> C)
{ a -> f (g a) }

_ >> _ [assoc]
: { A, B, C : Type } -> (g : A -> B) -> (f : B -> C) -> (A -> C)
{ a -> f (g a) }


_ <| _ [right-assoc]
: { A, B : Type } -> (f : A -> B) -> (a : A) -> B
{ f a }

_ |> _ [left-assoc]
: { A, B : Type } -> (a : A) -> (f : A -> B) -> B
{ f a }


case
: { A, B : Type } -> A -> (A -> B) -> B
{ (_ |> _) }


fix
: { A, B : Type } -> (f : (A -> B) -> (A -> B)) -> (x : A) -> B
{ f (fix f) x }
