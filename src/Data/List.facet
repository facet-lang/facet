module Data.List
: Module

data List : (A : Type) -> Type
{ nil : List A
, cons : A -> List A -> List A }

map : { A, B : Type } -> (f : A -> B) -> (List A -> List B)
{ (nil)       -> nil
, (cons a as) -> cons (f a) (map f as) }

_ <> _ : { A : Type } -> List A -> List A -> List A
{ (nil)       -> { x -> x }
, (cons a as) -> { bs -> cons a (as <> bs) } }
