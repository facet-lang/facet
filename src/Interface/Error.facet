Interface.Error
: Module

[ Data.Either
, Data.Function ]

Error : (E : Type) -> Interface
{ throw : E -> [Error E]A
, catch : [Error E]A -> (E -> [Error E]A) -> [Error E]A }

handle : { E, A : Type } -> (h : E -> [Error E]A) -> (a : [Error E]A) -> [Error E]A
{ catch a h }

try : { E, A : Type } -> (a : [Error E]A) -> [Error E]Either E A
{ handle inl (inr a) }

except : { E, A : Type } -> Either E A -> [Error E]A
{ either throw id }


# Handlers

runError : { E, A : Type } -> [Error E]A -> Either E A
{ error inl inr }

error
:  { E, A, R : Type }
-> (failure : E -> R)
-> (success : A -> R)
-> [Error E]A
-> R
{ [ throw e   ; _ ] -> failure e
# fixme: we can’t use << here because the parser doesn’t support parsing mixfix operators yet
, [ catch a h ; k ] -> error { e -> error failure success (k (h e)) } { a -> error failure success (k a) } a
, a                 -> success a }
