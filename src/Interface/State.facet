Interface.State
: Module

[ Data.Function
, Data.Pair
, Data.Unit ]

# FIXME: should we require the return types to be written more explicitly?
# [State S]{S}
# S -> [State S]{Unit}
State : (S : Type) -> Interface
{ get : S
, put : S -> Unit }

modify : { S : Type } -> (f : S -> S) -> [State S]Unit
{ put (f get!) }

execState : { S, A : Type } -> S -> [State S]A -> S
{ state const }

evalState : { S, A : Type } -> S -> [State S]A -> A
{ state { _ a -> a } }

runState : { S, A : Type } -> S -> [State S]A -> Pair S A
{ state pair }

state : { S, A, R : Type } -> (k : S -> A -> R) -> (s : S) -> [State S]A -> R
{ [ get   ; k ] -> state k s (k s)
, [ put s ; k ] -> state k s (k unit)
, a             ->       k s a }
