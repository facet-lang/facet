Base.Bool : Module
{ # fixme: itâ€™d be nice to drop the curly braces in module syntax
Bool : Type
{ False : Bool
, True  : Bool
}

not : Bool -> Bool
{ False -> True
, True  -> False
}

bool
: (e : {a}) -> (t : {a}) -> Bool -> a
{ False -> e!
, True  -> t!
}

# fixme: what would be a good syntax for linearity annotations?
# fixme: how do we describe the compilation of this down to a branch instruction?
if
: (c : Bool) -> (t : {a}) -> (e : {a}) -> a
{ case c { True -> t! | False -> e! } }
}
