# NB: this file and its syntax is entirely aspirational.

Base.Bool : Module
{ # fixme: it’d be nice to drop the curly braces in module syntax; maybe dropping the curly braces means it just extends to the rest of the current branch?

# fixme: how do we control the implicit scope? should there even be any? where do e.g. Type & Module come from?
# fixme: how do we make explicit imports convenient?
# fixme: parameterized modules are relatively obvious from the definition side (Base.Parameterized : Blah -> Module), but:
# 1. where do the symbols in that outer scope come from? can we differentiate between the imports needed to construct the module and the imports needed by the module itself? (phasing annotations here too?)
# 2. what does it look like applying that stuff on the import side?

# wait, isn’t module parameterization kind of redundant? maybe modules can have effects too. `Base.Bool.Test : [Test]Module`

# should we have a (non-nesting) block comment syntax?

# documentation
# testing

Bool : Type
{ false : Bool
, true  : Bool
}

not : Bool -> Bool
{ (false) -> true
, (true)  -> false
}

not : Doc # fixme: annotate to indicate it’s only available at doc time
# fixme: would be nice to somehow attach this to the definition above in the syntax tree too
{ line "negate a Bool"
, examples # these would presumably be automatically tested
  [ not true  ==> false
  , not false ==> true
  ]
, properties # these would presumably be automatically property tested
  [ prop "anti-idempotence" : Bool -> Prop { x -> not x =/= not (not x) }
  ]
, since 1 0 0 0
}

bool
: (e : {a}) -> (t : {a}) -> Bool -> a
{ (false) -> e!
, (true)  -> t!
}

# fixme: what would be a good syntax for linearity annotations?
# fixme: how do we describe the compilation of this down to a branch instruction?
if
: (c : Bool) -> (t : {a}) -> (e : {a}) -> a
{ case c { (true) -> t! , (false) -> e! } }

# fixme: can we type terms in declaration scope as having compile-time phasing using QTT–style annotations on the context?
# fixme: can we just sort of assume that stuff has the same phase as its module? (or “no earlier than” perhaps?)


Base.Bool.Tests : Module # maybe parameterize this module by a signature for tests or something
# annotate this module via a semiring describing that it only lives in the test phase
# we can’t export this in other phases either which is an interesting thought
{

not_antiidempotence : (x : Bool) -> Test
{ not x =/= not (not x) }

}

}
